{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  extends: [
    "config:recommended",
    "docker:enableMajor",
    ":disableRateLimiting",
    ":dependencyDashboard",
    ":semanticCommits",
    ":enablePreCommit",
    ":automergeBranch",
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: "Renovate Dashboard ðŸ¤–",
  suppressNotifications: ["prEditedNotification", "prIgnoreNotification"],
  rebaseWhen: "conflicted",
  schedule: ["on saturday"],
  "pre-commit": {
    enabled: true,
  },
  "github-actions": {
    fileMatch: ["(^|/)workflows/.+.ya?ml$"],
  },
  flux: {
    fileMatch: [
      "(^|/)ansible/.+\\.ya?ml(\\.j2)?$",
      "(^|/)kubernetes/.+\\.ya?ml(\\.j2)?$",
    ],
  },
  "helm-values": {
    fileMatch: [
      "(^|/)ansible/.+\\.ya?ml(\\.j2)?$",
      "(^|/)kubernetes/.+\\.ya?ml(\\.j2)?$",
    ],
  },
  kubernetes: {
    fileMatch: [
      "(^|/)ansible/.+\\.ya?ml(\\.j2)?$",
      "(^|/)kubernetes/.+\\.ya?ml(\\.j2)?$",
    ],
  },
  kustomize: {
    fileMatch: ["(^|/)kustomization\\.ya?ml(\\.j2)?$"],
  },
  pip_requirements: {
    fileMatch: ["(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)(\\.j2)?$"],
  },
  "ansible-galaxy": {
    fileMatch: ["(^|/)(galaxy|requirements)(\\.ansible)?\\.ya?ml(\\.j2)?$"],
  },
  nix: {
    enabled: true,
  },
  ignorePaths: [
    "**/node_modules/**",
    "**/bower_components/**",
    "**/vendor/**",
    "**/examples/**",
    "**/__tests__/**",
    "**/test/**",
    "**/tests/**",
    "**/__fixtures__/**",
    ".archive/**",
  ],
  commitMessageTopic: "{{depName}}",
  commitMessageExtra: "to {{newVersion}}",
  commitMessageSuffix: "",
  packageRules: [
    {
      description: ["Auto merge Github Actions"],
      matchManagers: ["github-actions"],
      automerge: true,
      automergeType: "branch",
      ignoreTests: true,
      matchUpdateTypes: ["minor", "patch"],
    },
    {
      description: [
        "Auto-merge container digests updates for trusted containers",
      ],
      matchDatasources: ["docker"],
      automerge: true,
      automergeType: "branch",
      ignoreTests: true,
      matchUpdateTypes: ["digest"],
      matchPackageNames: [
        "/ghcr.io/nginxinc/",
        "/ghcr.io/onedr0p/",
        "/public.ecr.aws/docker/library/",
      ],
    },
    {
      description: ["Flux Group"],
      groupName: "Flux",
      matchDatasources: ["docker", "github-tags"],
      versioning: "semver",
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
      matchPackageNames: ["/fluxcd/"],
    },
    {
      description: ["System Upgrade Controller Group"],
      groupName: "System Upgrade Controller",
      matchDatasources: ["docker", "github-releases"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
      matchPackageNames: ["/rancher/system-upgrade-controller/"],
    },
    {
      description: ["Actions Runner Controller Group"],
      groupName: "Actions Runner Controller",
      matchPackageNames: [
        "actions-runner-controller-charts/gha-runner-scale-set-controller",
        "actions-runner-controller-charts/gha-runner-scale-set",
        "/gha-runner-scale-set/",
      ],
      matchDatasources: ["helm", "docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
    },
    {
      description: ["Immich Group"],
      groupName: "Immich",
      matchDatasources: ["docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
      matchPackageNames: ["/immich-app/"],
    },
    {
      description: ["Vikunja Group"],
      groupName: "Vikunja",
      matchDatasources: ["docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
      matchPackageNames: ["/vikunja/"],
    },
    {
      description: ["effect-ts Group"],
      groupName: "effect-ts",
      matchPackageNames: ["effect", "@effect{/,}**"],
      matchDatasources: ["npm"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
    },
    {
      description: ["K8s CSI Group"],
      groupName: "sig-storage",
      matchDatasources: ["docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      matchPackageNames: ["/registry.k8s.io/sig-storage/csi-/"],
    },
    {
      description: ["calibre Group"],
      groupName: "calibre",
      matchCurrentValue: "/^(universal-calibre-)?v\\d+/",
      matchDatasources: ["docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
      matchPackageNames: [
        "/ghcr.io/linuxserver/calibre/",
        "/ghcr.io/linuxserver/mods/",
      ],
    },
    {
      description: ["@tsconfig bases Group"],
      groupName: "tsconfig-bases",
      matchDatasources: ["npm"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      matchPackageNames: ["@tsconfig{/,}**"],
    },
    {
      description: ["Intel device plugins Group"],
      groupName: "Intel device plugins",
      matchPackageNames: [
        "intel-device-plugins-gpu",
        "intel-device-plugins-operator",
      ],
      matchDatasources: ["helm"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
    },
    {
      description: ["Volsync Group"],
      groupName: "volsync",
      matchDatasources: ["helm", "docker"],
      group: {
        commitMessageTopic: "{{{groupName}}} group",
      },
      separateMinorPatch: true,
      matchPackageNames: ["/volsync/"],
    },
    {
      description: ["Use custom versioning for firefly-iii"],
      matchDatasources: ["docker"],
      versioning: "regex:^version-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$",
      matchPackageNames: ["fireflyiii/core", "fireflyiii/data-importer"],
    },
    {
      description: ["Use custom versioning for linuxserver.io containers"],
      matchDatasources: ["docker"],
      versioning: "regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)(?:\\.(?<patch>\\d+))?(?:-ls(?<build>\\d+))?$",
      matchPackageNames: [
        "/^ghcr.io\\/linuxserver\\//",
        "!ghcr.io/linuxserver/mods",
        "!ghcr.io/linuxserver/lazylibrarian",
      ],
    },
    {
      description: ["Custom versioning for linuxserver.io mods"],
      matchDatasources: ["docker"],
      versioning: "regex:^(?<compatibility>.+?)(-v(?<major>\\d+)(\\.(?<minor>\\d+))?(\\.(?<patch>\\d+))?)?$",
      matchPackageNames: ["ghcr.io/linuxserver/mods"],
    },
    {
      description: ["Use custom versioning for k0s/k3s"],
      matchDatasources: ["github-releases"],
      versioning: "regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(?<compatibility>\\+k.s)\\.?(?<build>\\d+)$",
      matchPackageNames: ["/k0s/", "/k3s/"],
    },
    {
      description: ["Use custom versioning for minio"],
      matchDatasources: ["docker"],
      versioning: "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z$",
      matchPackageNames: ["/minio/"],
    },
    {
      matchDatasources: ["helm"],
      commitMessageTopic: "chart {{depName}}",
    },
    {
      matchDatasources: ["docker"],
      commitMessageTopic: "image {{depName}}",
    },
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["major"],
      commitMessagePrefix: "feat(container)!: ",
    },
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["minor"],
      semanticCommitType: "feat",
      semanticCommitScope: "container",
    },
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["patch"],
      semanticCommitType: "fix",
      semanticCommitScope: "container",
    },
    {
      matchDatasources: ["docker"],
      matchUpdateTypes: ["digest"],
      semanticCommitType: "chore",
      semanticCommitScope: "container",
    },
    {
      matchDatasources: ["helm"],
      matchUpdateTypes: ["major"],
      commitMessagePrefix: "feat(helm)!: ",
    },
    {
      matchDatasources: ["helm"],
      matchUpdateTypes: ["minor"],
      semanticCommitType: "feat",
      semanticCommitScope: "helm",
    },
    {
      matchDatasources: ["helm"],
      matchUpdateTypes: ["patch"],
      semanticCommitType: "fix",
      semanticCommitScope: "helm",
    },
    {
      matchDatasources: ["galaxy", "galaxy-collection"],
      matchUpdateTypes: ["major"],
      commitMessagePrefix: "feat(ansible)!: ",
    },
    {
      matchDatasources: ["galaxy", "galaxy-collection"],
      matchUpdateTypes: ["minor"],
      semanticCommitType: "feat",
      semanticCommitScope: "ansible",
    },
    {
      matchDatasources: ["galaxy", "galaxy-collection"],
      matchUpdateTypes: ["patch"],
      semanticCommitType: "fix",
      semanticCommitScope: "ansible",
    },
    {
      matchDatasources: ["github-releases", "github-tags"],
      matchUpdateTypes: ["major"],
      commitMessagePrefix: "feat(github-release)!: ",
    },
    {
      matchDatasources: ["github-releases", "github-tags"],
      matchUpdateTypes: ["minor"],
      semanticCommitType: "feat",
      semanticCommitScope: "github-release",
    },
    {
      matchDatasources: ["github-releases", "github-tags"],
      matchUpdateTypes: ["patch"],
      semanticCommitType: "fix",
      semanticCommitScope: "github-release",
    },
    {
      matchManagers: ["github-actions"],
      matchUpdateTypes: ["major"],
      commitMessagePrefix: "feat(github-action)!: ",
    },
    {
      matchManagers: ["github-actions"],
      matchUpdateTypes: ["minor"],
      semanticCommitType: "feat",
      semanticCommitScope: "github-action",
    },
    {
      matchManagers: ["github-actions"],
      matchUpdateTypes: ["patch"],
      semanticCommitType: "fix",
      semanticCommitScope: "github-action",
    },
    {
      matchUpdateTypes: ["major"],
      labels: ["type/major"],
    },
    {
      matchUpdateTypes: ["minor"],
      labels: ["type/minor"],
    },
    {
      matchUpdateTypes: ["patch"],
      labels: ["type/patch"],
    },
    {
      matchDatasources: ["docker"],
      addLabels: ["renovate/container"],
    },
    {
      matchDatasources: ["helm"],
      addLabels: ["renovate/helm"],
    },
    {
      matchDatasources: ["galaxy", "galaxy-collection"],
      addLabels: ["renovate/ansible"],
    },
    {
      matchDatasources: ["github-releases", "github-tags"],
      addLabels: ["renovate/github-release"],
    },
    {
      matchManagers: ["github-actions"],
      addLabels: ["renovate/github-action"],
    },
  ],
  customManagers: [
    {
      customType: "regex",
      description: ["Process various other dependencies"],
      fileMatch: [
        "(^|/).taskfiles/.+\\.ya?ml$",
        "(^|/)ansible/.+\\.ya?ml(\\.j2)?$",
        "(^|/)kubernetes/.+\\.ya?ml(\\.j2)?$",
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?( extractVersion=(?<extractVersion>\\S+))?\n.*?"(?<currentValue>.*)"\n',
        "datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)\n.*?-\\s(.*?)/(?<currentValue>[^/]+)/[^/]+\n",
      ],
      datasourceTemplate: "{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}",
    },
    {
      customType: "regex",
      description: "Process docker mods for linuxserver images",
      fileMatch: ["(^|/)kubernetes/.+\\.ya?ml(\\.j2)?$"],
      matchStrings: [
        'renovate: lsio-docker-mod.*\\n\\s*"(?<depName>.+?):(?<currentValue>.+?)(@(?<currentDigest>sha256:.+?))?"',
      ],
      datasourceTemplate: "docker",
    },
  ],
}
