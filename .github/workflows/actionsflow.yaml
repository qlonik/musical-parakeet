---
name: Actionsflow

# event `repository_dispatch` with the type `webhook` is reserved by Actionsflow.

on:
  schedule:
    - cron: "0 * * * *"
  push:
    branches:
      - main
    paths:
      - ".github/workflows/actionsflow.yaml"
      - "workflows/**"
  repository_dispatch:
    types: [webhook]
  workflow_dispatch:
    inputs:
      include:
        description: |
          --include: workflow file filter
            You can use glob format to filter your workflows. The default value
            is empty value, meaning no filter will be applied.
        required: false
        default: ""
      force:
        description: "--force: whether force to run workflow (true or false)"
        required: false
        default: "false"
      verbose:
        description: "--verbose: debug workflow (true or false)"
        required: false
        default: "false"

concurrency: actionsflow

jobs:
  generate-workflows:
    name: Generate workflows from Actionsflow
    runs-on: ["gha-home-ops"]
    outputs:
      run-act: ${{ steps.check-workflow-files.outputs.present }}
      artifact-id: ${{ steps.upload-configs.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run Actionsflow
        uses: qlonik/actionsflow-action@8ffb42cf578a707a75e9f7b134e432914bf91559 # v3.1.0
        with:
          args: >-
            build
            ${{ github.event.inputs.include != '' && format('--include "{0}"', github.event.inputs.include) || '' }}
            -f ${{ github.event.inputs.force == 'true' && 'true' || 'false' }}
            --verbose ${{ github.event.inputs.verbose == 'true' && 'true' || 'false' }}
          json-secrets: ${{ toJSON(secrets) }}
          json-github: ${{ toJSON(github) }}

      - name: Check workflow files
        id: check-workflow-files
        run: |-
          if [[ -d "./dist/workflows" && ! -z "$(ls -A ./dist/workflows)" ]]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload generated workflows
        id: upload-configs
        if: ${{ steps.check-workflow-files.outputs.present == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: actionsflow-act-config
          path: ./dist
          if-no-files-found: error
          retention-days: 1

  run-act:
    name: Run act
    runs-on: ["gha-home-ops"]
    needs: generate-workflows
    if: ${{ needs.generate-workflows.outputs.run-act == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: actionsflow-act-config
          path: ./dist

      - name: Install act
        if: ${{ steps.check-workflow-files.outputs.present == 'true' }}
        run: curl -fsSL https://raw.githubusercontent.com/nektos/act/master/install.sh | bash -s -- -b ~/bin/

      - name: Run act
        if: ${{ steps.check-workflow-files.outputs.present == 'true' }}
        # Consider adding support for cache artifacts
        # https://github.com/nektos/act/issues/329#issuecomment-1187246629
        # With this, cache action can be used in actionsflow workflows, caught by act
        # and then uploaded to actual github cache
        run: |-
          ~/bin/act \
            ${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }} \
            --bind \
            --eventpath ./dist/event.json \
            --workflows ./dist/workflows \
            --secret-file ./dist/.secrets \
            --env-file ./dist/.env \
            --platform ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest

      - name: Delete artifacts
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.deleteArtifact({
              artifact_id: "${{ needs.generate-workflows.outputs.artifact-id }}",
              ...context.repo,
            })
