---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: immich-app
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.5.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: redis
      namespace: default
    -
      # need to be removed or renamed to db
      name: immich
      namespace: default

  values:
    global:
      fullnameOverride: immich
    controllers:
      main:
        nameOverride: server
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.94.1@sha256:c7b80752d48464dea1c4495ff810365a0809d89c2ac219547d3c1aed81c6411f
            envFrom: &envfrom
              - configMapRef:
                  name: &configmap immich-configmap
              - secretRef:
                  name: immich-secret
            command: "/bin/sh"
            args:
              - "./start-server.sh"
            resources:
              requests:
                cpu: 100m
                memory: 250Mi
              limits:
                memory: 2Gi
            probes:
              liveness: &server-probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /server-info/ping
                    port: &server-port 3001
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *server-probe
              startup:
                enabled: false
        initContainers:
          init-db:
            image: &init-image
              repository: ghcr.io/onedr0p/postgres-init
              tag: 14.8@sha256:dfddde81c0d49da09da1e893c95c32934333baba60edde707be5010dc3baa4c2
            env: &init-env
              - name: INIT_POSTGRES_SUPER_USER
                valueFrom:
                  secretKeyRef:
                    name: postgres-secret
                    key: username
              - name: INIT_POSTGRES_SUPER_PASS
                valueFrom:
                  secretKeyRef:
                    name: postgres-secret
                    key: password
            envFrom: *envfrom
          create-extensions:
            dependsOn: init-db
            image: *init-image
            env: *init-env
            envFrom: *envfrom
            command: "/config/run-sql-scripts.sh"
      microservices:
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.94.1@sha256:c7b80752d48464dea1c4495ff810365a0809d89c2ac219547d3c1aed81c6411f
            envFrom: *envfrom
            command: "/bin/sh"
            args:
              - "./start-microservices.sh"
            resources:
              requests:
                cpu: 100m
                memory: 1Gi
              limits:
                memory: 4Gi
      machine-learning:
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.94.1@sha256:a3c612c548d5f547a31d001d97f661d7acd4a0ae354de76a70e45162d2b81014
            envFrom:
              - configMapRef:
                  name: *configmap
            probes:
              liveness: &machine-learning-probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &machine-learning-port 3003
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *machine-learning-probe
              startup:
                enabled: false

    defaultPodOptions:
      annotations:
        reloader.stakater.com/auto: "true"
      enableServiceLinks: false
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: "OnRootMismatch"
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
        capabilities: { drop: ["ALL"] }

    service:
      main:
        nameOverride: server
        controller: main
        primary: true
        ports:
          http:
            port: *server-port
      machine-learning:
        nameOverride: machine-learning
        controller: machine-learning
        primary: true
        ports:
          http:
            port: *machine-learning-port

    ingress:
      main:
        enabled: true
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          # proxy-body-size is set to 0 to remove the body limit on file uploads
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
        hosts:
          - host: &host "immich.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host

    persistence:
      immich:
        type: persistentVolumeClaim
        existingClaim: immich
        advancedMounts:
          main:
            main:
              - path: /usr/src/app/upload
          microservices:
            main:
              - path: /usr/src/app/upload
      geocoding-dump:
        type: emptyDir
        advancedMouns:
          microservices:
            main:
              - path: /usr/src/app/.reverse-geocoding-dump
      machine-learning-cache:
        type: persistentVolumeClaim
        storageClass: nfs-fast
        size: 10Gi
        accessMode: ReadWriteMany
        advancedMounts:
          machine-learning:
            main:
              - path: /cache
      postgresql-init-scripts:
        type: configMap
        name: immich-postgresql-init-scripts
        defaultMode: 0775
        advancedMounts:
          main:
            create-extensions:
              - path: /config
                readOnly: true
