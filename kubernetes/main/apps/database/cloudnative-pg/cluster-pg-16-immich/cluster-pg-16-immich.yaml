---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: pg-16-immich
spec:
  instances: 2
  imageName: ghcr.io/tensorchord/cloudnative-vectorchord:16-0.3.0@sha256:69c827b85380454b46260219a93c9fd13942453200d1d07f856a17d7af0df8b2
  postgresql:
    shared_preload_libraries:
      - "vchord.so"
    enableAlterSystem: true
  primaryUpdateStrategy: unsupervised
  storage:
    size: 10Gi
    storageClass: openebs-hostpath
  superuserSecret:
    name: pg-16-immich-superuser-secret
  enableSuperuserAccess: true
  monitoring:
    enablePodMonitor: true

  externalClusters:
    - name: &active-cluster pg-16-immich-v0
      barmanObjectStore: &barman-object-store
        data:
          compression: bzip2
        wal:
          compression: bzip2
          maxParallel: 8
        destinationPath: s3://postgres-backup/
        endpointURL: http://minio.default.svc.cluster.local:9000
        s3Credentials:
          accessKeyId:
            name: pg-16-immich-superuser-secret
            key: s3-access-key-id
          secretAccessKey:
            name: pg-16-immich-superuser-secret
            key: s3-secret-access-key
  bootstrap:
    initdb:
      ## for empty new db
      # The 'import' method does not work for immich, because of extensions
      # and custom search_path. Need to manually dump and load the database.
      # See
      # https://github.com/immich-app/immich/blob/main/docs/docs/administration/backup-and-restore.md
      # for some pointers.
      #
      # dump with:
      # `pg_dump -U postgres -b --clean --if-exists -f immich_dump.sql immich` or
      # `kubectl -n database exec -ti <primary-pod-name> -- pg_dumpall --clean --if-exists --username=postgres | gzip > ./immich_dump.sql.gz`
      # (replace <primary-pod-name> with actual value, e.g. "pg-16-immich-1")
      # then edit the dumped file with:
      # `sed "s/SELECT pg_catalog.set_config('search_path', '', false);/SELECT pg_catalog.set_config('search_path', 'public, pg_catalog', true);/g"`
      # load with:
      # `psql -U postgres -d immich < immich_dump.sql`
      # lastly, needed to run last 3 line inside psql connected to imported
      # database to grant privileges to immich user.
      owner: immich
      database: immich
      secret:
        name: pg-16-immich-secret
      dataChecksums: true
      postInitApplicationSQL:
        - ALTER SYSTEM SET search_path TO "$user", public, vectors;
        - SET search_path TO "$user", public, vectors;
        - CREATE EXTENSION IF NOT EXISTS vchord CASCADE;
        - CREATE EXTENSION IF NOT EXISTS earthdistance WITH SCHEMA pg_catalog CASCADE;
        - CREATE EXTENSION IF NOT EXISTS pg_trgm;
        - CREATE EXTENSION IF NOT EXISTS unaccent;
        - ALTER SCHEMA vectors OWNER TO immich;
        - GRANT ALL PRIVILEGES ON DATABASE immich TO immich;
        - GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO immich;
        - GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA vectors TO immich;
    ## for recovering the same version (e.g. cluster rebuild)
    # recovery:
    #   source: *active-cluster

  backup:
    retentionPolicy: 30d
    barmanObjectStore:
      <<: *barman-object-store
      serverName: pg-16-immich-v1
