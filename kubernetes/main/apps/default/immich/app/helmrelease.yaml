---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.5.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: redis
      namespace: default
  values:
    controllers:
      immich:
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.120.1@sha256:4193f3cc99bb4d99f53007f07d45e2efbcd531f4e81a765470b2cce433f33131
            env:
              TZ: "${TIMEZONE}"
              IMMICH_LOG_LEVEL: verbose
              IMMICH_MACHINE_LEARNING_URL: http://immich-machine-learning.default.svc.cluster.local:3003
            envFrom: &envFrom
              - secretRef:
                  name: immich-secret
            resources:
              requests:
                cpu: 100m
                memory: 1Gi
              limits:
                memory: 4Gi
            probes:
              liveness: &server-probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: &server-port 2283
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *server-probe
              startup:
                enabled: false
            securityContext: &container-sec
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities: { drop: ["ALL"] }
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16.4@sha256:e41c745b54485341e00efbd27556f0717623a119f0d5107e5ff831aa1322c76f
            envFrom: *envFrom
      machine-learning:
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.120.1@sha256:0a5d8d75f026342a56e1065613e565ec40a05f4042dc7fead1dcfd66d539fef3
            env:
              TZ: "${TIMEZONE}"
            probes:
              liveness: &machine-learning-probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &machine-learning-port 3003
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *machine-learning-probe
              startup:
                enabled: false
            securityContext: *container-sec

    defaultPodOptions:
      annotations:
        reloader.stakater.com/auto: "true"
      enableServiceLinks: false
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: "OnRootMismatch"

    service:
      immich:
        primary: true
        controller: immich
        ports:
          http:
            primary: true
            port: *server-port
      machine-learning:
        nameOverride: machine-learning
        primary: true
        controller: machine-learning
        ports:
          http:
            primary: true
            port: *machine-learning-port

    ingress:
      immich:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          # proxy-body-size is set to 0 to remove the body limit on file uploads
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: Immich
          gethomepage.dev/icon: immich.svg
          gethomepage.dev/description: Photos
          gethomepage.dev/group: Media
          gethomepage.dev/siteMonitor: &internalUrl "http://{{ .Release.Name }}.default.svc.cluster.local:2283"
          gethomepage.dev/widget.type: immich
          gethomepage.dev/widget.url: *internalUrl
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_IMMICH_API_KEY}}` }}"
        hosts:
          - host: &host "immich.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: immich
                  port: http
        tls:
          - hosts:
              - *host

    persistence:
      immich:
        type: persistentVolumeClaim
        existingClaim: immich
        advancedMounts:
          immich:
            main:
              - path: /usr/src/app/upload
      geocoding-dump:
        type: emptyDir
        advancedMounts:
          immich:
            main:
              - path: /usr/src/app/.reverse-geocoding-dump
      machine-learning-cache:
        type: persistentVolumeClaim
        storageClass: longhorn
        size: 10Gi
        accessMode: ReadWriteMany
        advancedMounts:
          machine-learning:
            main:
              - path: /cache
      tmp:
        type: emptyDir
        advancedMounts:
          machine-learning:
            main:
              - path: /tmp
